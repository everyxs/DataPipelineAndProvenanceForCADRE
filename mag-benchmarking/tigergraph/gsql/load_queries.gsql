USE GRAPH mag


BEGIN
CREATE QUERY count_all_vertices() FOR GRAPH mag {
  SumAccum<INT> @@vertexCount;
  vertices = {paper.*, author.*, affiliation.*, journal.*, fieldofstudy.*, conferenceinstance.*, conferenceseries.*};
  tmp = SELECT v FROM vertices:v POST_ACCUM @@vertexCount += 1;

  PRINT @@vertexCount;
}
END
INSTALL QUERY count_all_vertices

BEGIN
CREATE QUERY count_all_edges() FOR GRAPH mag {
  SumAccum<INT> @@edgeCount;
  vertices = {paper.*, author.*, affiliation.*, journal.*, fieldofstudy.*, conferenceinstance.*, conferenceseries.*};
  tmp = SELECT e FROM vertices:src -(:e)-> :tgt POST_ACCUM @@edgeCount += 1;
  PRINT @@edgeCount;
}
END
INSTALL QUERY count_all_edges


BEGIN
CREATE QUERY lte_four_hop_neighbors(VERTEX<paper> p) FOR GRAPH mag {
  OrAccum  @visited = false;
  Start = {p};

  FirstNeighbors = SELECT tgt
                     FROM Start:s -(refers_to:e)-> paper:tgt
                    ACCUM tgt.@visited += true, s.@visited += true;

  SecondNeighbors = SELECT tgt
                      FROM FirstNeighbors:s -(refers_to:e)-> paper:tgt
                     WHERE tgt.@visited == false
		     ACCUM tgt.@visited += true, s.@visited += true;

  ThirdNeighbors = SELECT tgt
  		     FROM SecondNeighbors:s -(refers_to:e)-> paper:tgt
		    WHERE tgt.@visited == false
		    ACCUM tgt.@visited += true, s.@visited += true;

  FourthNeighbors = SELECT tgt
  		      FROM ThirdNeighbors -(refers_to:e)-> paper:tgt
		     WHERE tgt.@visited == false;

  All = FirstNeighbors UNION SecondNeighbors UNION ThirdNeighbors UNION FourthNeighbors;
  PRINT All;
}
END
INSTALL QUERY lte_four_hop_neighbors
